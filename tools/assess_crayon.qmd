---
title: "assess_crayon"
format: html
editor: visual
---

## Assess Crayon

Many crayons are not based on reasonable or accurate metrics for the goodness of each line or of the network as a whole. This effort is to apply r5r to a proposed transit network to see where new lines would make the most difference in terms of travel time or access to employment over the existing network or other modes.

This script calculates the accessibility of the network defined by the files in the /dep/active folder. Comparisons of networks are carried out elsewhere.

There are several files in the /dep/active folder:

-   a walking network and street network mapdb file from openstreetmaps

-   GTFS files, including your own (which you will need to generate using make_gtfs or some other tool)

The outputs are a map, a csv file, and a plot all showing how many jobs are within the commute distance cutoff for reach resident.

Puts the output files in a new folder in /dep/results_log/\<crayon_name\> to make the output available for comparison using compare\_\*.qmd scripts. Manually copy the shapes.geojson and stops.geojson files used to generate the GTFS being assessed to enable comparison using compare\_\*.qmd scripts.

## Name the crayon

```{r}
crayon_name <- "poco_ext" #"my_new_crayon"
crayons_folder <- "../dep/crayons/"
# results_folder <- "../dep/results_log/"
```

## Allocate Memory to Java

Note that OpenJDK Java SE **11** must be installed first (i.e. unzipped, in Windows copied to C:\\Program Files\\Java\\., environment variables added in Control Panel). Despite the r5r website, OpenJDK Java SE 21 will not work (at least it didn't in 2023).

```{r}
options(java.parameters = "-Xmx4G")
```

## Setup

Set the working directory in R to crayonest: setwd(wherever crayonest is). Shapefiles (and later other files) won't load if the working directory is not set to crayonest.

Packages needed to run r5r and make nice maps are loaded here.

```{r}
library(r5r)
library(sf) # for loading shapefiles
library(data.table)
library(ggplot2)
library(rJava)

library(readr)
library(tidyverse)

library(grid)
library(ggnewscale)
library(lwgeom) # for st_perimeter (not needed for st_area)

#use projected spherical geometry (on to a plane) for spatial calculations
sf::sf_use_s2(TRUE)
  
# Example data only: Oceans and rivers data for part of the province of BC
ocean <- st_read("../dep/maps/HydOcean_shp/HydOcean.shp")
river <- st_read("../dep/maps/HydRiver_shp/HydRiver.shp")
```

## Geography

Load the data about the geography needed by r5r from the /dep/active folder

```{r}
data_path <- "../dep/active"
suppressWarnings(
  r5r_core <- setup_r5(data_path) #This takes a minute or two and generates a ton of warnings
)
```

## Accessibility - Logistic

Calculates the number of jobs accessible within a reasonable commute of residents. Dots are used to represent each 500 people and 500 jobs. The dot density map is loaded as a file and is generated in a separate dot density tool based on census data. Commutes are modeled using the network loaded into r5r. The commute time cutoff is modeled as a logistic function around about 45 minutes, but this is a choice.

```{r}
library(accessibility)
library(h3jsr)

# Use the following files to model 2021 population and job distribution
# Example for Vancouver and Abbotsford CMA created using the dot density tool
points <- st_read("../dep/orig_dest/pop_dotdensity/dotdensity-500-vancouver-abbotsford.shp")
job_points <- st_read("../dep/orig_dest/job_dotdensity/jobdotdensity-500-vancouver-abbotsford.shp")

# Use the following files to model growth along a line
# Example for a Hastings-Arbutus crayon where 200,000 residents and 50,000 jobs are modeled in a ~1.6 km wide corridor along each radial segment 
#points <- st_read("../dep/orig_dest/growth/pop_growth.geojson")
#job_points <- st_read("../dep/orig_dest/growth/job_growth.geojson")

mode <- c("WALK", "TRANSIT")
max_walk_time <- 30 # minutes
time_window <- 10 # minutes Start times every minute for this number of minutes are considered
travel_time_cutoff <- 45 # minutes
decay_value <- 15

departure_datetime <- as.POSIXct("08-12-2023 14:00:00", format = "%d-%m-%Y %H:%M:%S")

# Method 3 "Quick and Easy Approach" but with a linear decay function
access <- accessibility(
  r5r_core,
  origins = points,
  destinations = job_points,
  mode = mode,
  opportunities_colnames = c("jobs"),
  decay_function = "logistic", # options: "step", "exponential", "fixed_exponential", "linear", "logistic"
  cutoffs = travel_time_cutoff,
  decay_value = decay_value,
  departure_datetime = departure_datetime,
  max_walk_time = max_walk_time,
  time_window = time_window,
  progress = FALSE)
```

## Map Accessibility

```{r}
# retrieve polygons of H3 spatial grid
#grid <- h3jsr::cell_to_polygon(points$id, simple = FALSE)
library(scales) # to remove scientific notation on legend numbers

# merge accessibility estimates
access_sf <- points |> 
  left_join(access, join_by(id == id))

xlim <- c(-123.26, -122.25) # Metro Vancouver
ylim <- c(49.0, 49.36) # Metro Vancouver

# Make job accessibility map
ggplot() +
  geom_sf(
    data = access_sf |> filter(accessibility > 0), 
    mapping = aes(color = accessibility),
    alpha = 0.3,
    size = 1,
    shape = 16, # Solid circle
    ) +
  scale_color_viridis_c(
    direction = -1, 
    option = 'B', 
    limits = c(0,500000),
    labels = comma
    ) +
#  labs(color = "Number of\npeople within\45 minutes") +
  labs(color = "Number of\njobs within\n45 minutes") +

  geom_sf(data = ocean, fill = "aliceblue", color = NA) +
  geom_sf(data = river, fill = "aliceblue", color = NA) +

  coord_sf(xlim = xlim, ylim = ylim) +
  theme_void() +
  theme(
    plot.background = element_rect(fill = "white", color = NA),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank()
  )

# Save job accessibility map
ggsave(
  paste(crayons_folder, crayon_name, "/results/transit_job_accessibility_map.png", sep = ""),
  units = "in", 
  width = 10, 
  height = 5.8, 
  dpi = 400
  )

# Make job accessibility xy scatter
ggplot(
  data = access |> arrange(accessibility) |> mutate(row_name = row_number()),
  mapping = aes(x = row_name, y = accessibility),
  size = 0.5
  ) +
  labs(
    title = "Accessibility",
    x = "Residential locations (each representing 500 people)", 
    y = "Number of jobs within 45 minutes"
  ) +
  scale_y_continuous(
    limits = c(0, 800000),
    labels = comma
    ) +
  geom_point()

# Save job accessibility xy scatter
ggsave(
  paste(crayons_folder, crayon_name, "/results/transit_job_accessibility_plot.png", sep = ""),
  units = "in", 
  width = 10, 
  height = 5.8, 
  dpi = 400
  )

write_csv(access, path = paste(crayons_folder, crayon_name, "/results/transit_job_accessibility.csv", sep = ""))
```

## Reallocate Memory

```{r}
r5r::stop_r5(r5r_core)
rJava::.jgc(R.gc = TRUE)
file.remove("../dep/active/Network.dat")
```
